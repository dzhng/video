rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // FOR DATA LENGTH:
    // id should be 30
    // UUIDs (like activityIds) are 36 characters, make it 50 to future proof
    // short text like names should be 50
    // URLs should be 280
    // short descriptions should be 280

    // ensures that only the input list of keys are used, and no others
    function assertKeys(keys) {
      return request.resource.data.keys().toSet().hasOnly(keys.toSet());
    }

    function isNewDoc() {
      return resource == null;
    }

    function requiredStringKey(key, minLen, maxLen) {
      return request.resource.data[key] is string && 
              request.resource.data[key].size() >= minLen &&
              request.resource.data[key].size() <= maxLen;
    }

    function optionalStringKey(key, maxLen) {
      return (key in request.resource.data && 
          request.resource.data[key] != null) ? 
        requiredStringKey(key, 0, maxLen) : true;
    }

    function requiredIntKey(key, min, max) {
      return request.resource.data[key] is int &&
              request.resource.data[key] >= min &&
              request.resource.data[key] <= max;
    }

    function optionalIntKey(key, min, max) {
      return key in request.resource.data ? requiredIntKey(key, min, max) : true;
    }

    function requiredBoolKey(key) {
      return request.resource.data[key] is bool;
    }

    function optionalBoolKey(key) {
      return key in request.resource.data ? requiredBoolKey(key) : true;
    }

    function requiredEnumKey(key, enums) {
      let item = request.resource.data[key];
      return requiredStringKey(key, 1, 10) &&
              item in enums.toSet();
    }

    function requiredTimeKey(key) {
      return request.resource.data[key] is timestamp;
    }

    function optionalTimeKey(key) {
      return (key in request.resource.data &&
          request.resource.data[key] != null) ? 
        requiredTimeKey(key) : true;
    }

    function requiredArrayKey(key, minLen, maxLen) {
      return request.resource.data[key] is list &&
              request.resource.data[key].size() <= maxLen &&
              request.resource.data[key].size() >= minLen &&
              !('' in request.resource.data[key]) &&
              !(null in request.resource.data[key]);
    }

    function optionalArrayKey(key, minLen, maxLen) {
      return (key in request.resource.data &&
          request.resource.data[key] != null) ? 
        requiredArrayKey(key, minLen, maxLen) : true;
    }

    function requiredObjectKey(key) {
      return request.resource.data[key] is map;
    }

    function optionalObjectKey(key) {
      return (key in request.resource.data &&
          request.resource.data[key] != null) ? 
        requiredObjectKey(key) : true;
    }

    function requiredCreatedAtKey() {
      // if it exists already in existing doc, we should not change the value
      let isServerTimestamp = request.resource.data.createdAt == request.time;
      return isNewDoc() ? isServerTimestamp : (request.resource.data.createdAt == resource.data.createdAt);
    }

    match /users/{userId} {
      allow read;

      allow create, update: if 
        request.auth != null && 
        request.auth.uid == userId &&
        assertKeys(['displayName', 'email', 'photoURL', 'bio', 'defaultWorkspaceId']) &&
        requiredStringKey('displayName', 1, 50) &&
        optionalStringKey('email', 50) &&
        optionalStringKey('photoURL', 280) &&
        optionalStringKey('bio', 280) &&
        optionalStringKey('defaultWorkspaceId', 30);
    }

    match /templates/{templateId} {
      allow read;

      allow create, update: if 
        request.auth != null &&
        assertKeys(['name', 'creatorId', 'workspaceId', 'ongoingCallId', 'activities', 'isDeleted', 'createdAt']) &&
        requiredStringKey('name', 1, 50) &&
        requiredStringKey('creatorId', 1, 30) &&
        requiredStringKey('workspaceId', 1, 30) &&
        optionalStringKey('ongoingCallId', 30) &&
        requiredBoolKey('isDeleted') &&
        requiredCreatedAtKey() &&

        // array of activity objects that define the call
        requiredArrayKey('activities', 0, 100) &&

        // when creating, make sure creatorId is set
        // when editing, make sure only members from the same workspace
        (isNewDoc() ? 
          (request.resource.data.creatorId == request.auth.uid) : 
          (exists(/databases/$(database)/documents/workspaces/$(resource.data.workspaceId)/members/$(request.auth.uid))));
    } // match template

    match /calls/{callId} {
      allow read;

      allow create, update: if
        request.auth != null &&
        assertKeys(['templateId', 'creatorId', 'workspaceId', 'isFinished', 'duration', 'activitiesSnapshot', 'createdAt']) &&
        requiredStringKey('templateId', 1, 30) &&
        requiredStringKey('creatorId', 1, 30) &&
        requiredStringKey('workspaceId', 1, 30) &&
        requiredCreatedAtKey() &&

        // marks if this call has finished, and stores duration in seconds
        requiredBoolKey('isFinished') &&
        optionalIntKey('duration', 0, 50000) &&

        // snapshotted state of activities when call is finished, for summary generation
        optionalArrayKey('activitiesSnapshot', 0, 100);
    } // match call

    match /presentations/{presentationId} {
      allow read;

      allow create, update: if
        request.auth != null &&
        assertKeys(['name', 'creatorId', 'workspaceId', 'slides', 'isProcessed', 'createdAt']) &&
        requiredStringKey('name', 1, 50) &&
        requiredStringKey('creatorId', 1, 30) &&
        requiredStringKey('workspaceId', 1, 30) &&
        // array of URLs or path in bucket
        requiredArrayKey('slides', 1, 1000) &&
        // set to true when all slides have been processed
        optionalBoolKey('isProcessed') &&
        requiredCreatedAtKey() &&
        // when creating, creatorId should be the current user, 
        // when editing, make sure it's the same user
        (isNewDoc() ?
          (request.resource.data.creatorId == request.auth.uid) : 
          (resource.data.creatorId == request.auth.uid));
    }

    // for members collectionGroup queries
    // only allow collection group queries for members to get their own workspaces
    match /{path=**}/members/{memberId} {
      allow read: if 
        request.auth != null &&
        resource.data.memberId == request.auth.uid;
    }

    match /{path=**}/invites/{inviteId} {
      allow read: if 
        request.auth != null;
    }

    match /workspaces/{workspaceId} {

      function currentMember() {
        return get(/databases/$(database)/documents/workspaces/$(workspaceId)/members/$(request.auth.uid)).data;
      }

      allow read;

      allow create, update: if
        request.auth != null &&
        assertKeys(['name', 'logoURL', 'primaryColor', 'backgroundColor', 'isDeleted', 'createdAt']) &&
        requiredStringKey('name', 1, 50) &&
        optionalStringKey('logoURL', 280) &&
        optionalStringKey('primaryColor', 10) &&
        optionalStringKey('backgroundColor', 10) &&
        requiredBoolKey('isDeleted') &&
        requiredCreatedAtKey() &&
        // make sure member doc is also created
        // only workspace owners can update
        (isNewDoc() ? 
          getAfter(/databases/$(database)/documents/workspaces/$(request.resource.id)/members/$(request.auth.uid)).data.role == 'owner' : 
          currentMember().role == 'owner');

      // id of doc is actually id of user, which is also memberId field (duplicate this in memberId field for collection group query indexing)
      match /members/{memberId} {
        allow read: if
          request.auth != null;

        allow create, update: if
          request.auth != null &&
          assertKeys(['memberId', 'role', 'createdAt']) &&
          // have explicit memberId for collectionGroup indexing
          requiredStringKey('memberId', 1, 30) &&
          requiredEnumKey('role', ['owner', 'member', 'deleted']) &&
          requiredCreatedAtKey() &&

          // make sure memberId is always equal to the docId
          request.resource.data.memberId == memberId &&

          // if operating on self, can only do it on new workspace creation as part of batch, OR marking self as deleted
          // if operating on others, can only do it if you are owner of current workspace
          (request.auth.uid == memberId ? 
            (!exists(/databases/$(database)/documents/workspaces/$(workspaceId)) ||
              request.resource.data.role == 'deleted') : 
            (currentMember().role in ['owner'])
          );
      }

      // track new membership invites into workspaces
      match /invites/{inviteId} {
        allow read: if
          request.auth != null;

        allow create: if
          request.auth != null &&
          assertKeys(['inviterId', 'email', 'createdAt']) &&
          requiredStringKey('inviterId', 1, 30) &&
          requiredStringKey('email', 1, 50) &&
          requiredCreatedAtKey();
      }
    } // match workspace 

  } // match database
} // service firestore
