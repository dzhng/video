rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    function assertStringKey(key) {
      return request.resource.data[key] is string && 
              request.resource.data[key].size > 0;
    }

    function optionalStringKey(key) {
      return (request.resource.data[key]) ? assertStringKey(key) : true;
    }

    function assertIntKey(key) {
      return request.resource.data[key] is integer;
    }

    function assertPosIntKey(key) {
      return request.resource.data[key] is integer &&
              request.resoure.data[key] >= 0;
    }

    function assertBoolKey(key) {
      return request.resource.data[key] is bool;
    }

    function assertTimeKey(key) {
      return request.resource.data[key] is timestamp;
    }

    function assertArray(key) {
      return request.resource.data[key] is list;
    }

    function assertCreatedAt() {
      return resource.data.createdAt ? 
        // if it exists already in existing doc, we should not change the value
        (request.resource.data.createdAt ? 
          (request.resource.data.createdAt == resource.data.createdAt) : true) :
        // if it doesn't exist in existing doc, make sure it's server timestamp
        (assertTimeKey('createdAt') && request.resource.data.createdAt == request.time);
    }

    match /networks/{networkId} {

      function currentUser() {
        return get(/databases/$(database)/documents/$(networkId)/users/$(request.auth.uid));
      }

      function currentAdmin() {
        return get(/database/$(database)/documents/$(networkId)/admins/$(request.auth.uid));
      }

      allow read: if
          request.auth != null;

      allow update: if 
          request.auth != null &&
          assertStringKey('name') &&
          optionalStringKey('logoURL') &&
          optionalStringKey('primaryColor') &&
          assertCreatedAt() &&
          // only network owners can update
          currentAdmin().role === 'owner';

      match /admins/{adminId} {
        allow read: if
            request.auth != null &&
            // make sure only users in the same network can read admin list
            exists(/database/$(database)/documents/$(networkId)/users/$(request.auth.uid));

        allow write: if
            assertStringKey('role') &&
            assertCreatedAt() &&
            // make sure only owners can create another admin
            currentAdmin().role === 'owner' &&
            // make sure this admin is also an user
            exists(/database/$(database)/documents/$(networkId)/users/$(adminId));
      }

      match /users/{userId} {
        allow read;

        allow create: if 
            request.auth != null && 
            request.auth.uid == userId &&
            optionalStringKey('bio') &&
            assertCreatedAt();
      }

      match /calls/{callId} {
        allow read: if
            request.auth != null;

        allow write: if 
            request.auth != null &&
            assertStringKey('name') &&
            assertStringKey('ownerId') &&
            // list of internal users who have access to this call
            assertArray('participants') &&
            // list of external users (in form of emails) who have access to this call
            assertArray('externalEmails') &&
            assertCreatedAt() &&
            // only owners of the doc can write
            (resource.data.ownerId ? 
              resource.data.ownerId == request.auth.uid : 
              request.resource.data.ownerId == request.auth.uid);
      }
    }

  }
}
